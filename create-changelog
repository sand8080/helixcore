#!/usr/bin/env python
import os
import sys
from optparse import OptionParser
from email.Utils import formatdate

class ChangelogBuilder(object):
    def __init__(self, package, base_version):
        self.package = package
        self.base_version = base_version
        self.root_dir = os.path.realpath(os.path.dirname(__file__))

    def create_changelog(self):
        self.check_on_master()
        actual_changes = self.actual_changes_list()
        if len(actual_changes):
            self.save_changelog(actual_changes, self.current_package_num())
            self.fix_building_success()

    def check_on_master(self):
        stdout = os.popen("git branch | grep '*'")
        branch = stdout.read()
        try:
            branch.index('master')
        except ValueError:
            raise Exception('git repository is not on master branch')

    def actual_changes_list(self):
        """
        returns changes from last git commit till now.
        list sorted in descent order.
        """
        last_commit = self.last_package_commit()
        changes = []
        for ch in self.all_commits():
            commit, descr = ch.split(' ', 1)
            if commit.strip() == last_commit.strip():
                break
            else:
                changes.append(descr)
        return changes

    def last_package_commit(self):
        name = self.last_version_file_name()
        commit = None
        if os.path.exists(name):
            commit = open(name, 'r').readline()
        return commit

    def last_current_commit(self):
        return os.popen('git log --pretty=format:%H').readline()

    def all_commits(self):
        return os.popen('git log --pretty=format:"%H [%an] %s"').read().strip().split('\n')

    def current_package_num(self):
        return len(self.all_commits())

    def last_version_file_name(self):
        return os.path.join(self.root_dir, 'debian', 'LAST_VERSION')

    def fix_building_success(self):
        """
        Saves last current commit to LAST_VERSION file
        """
        name = self.last_version_file_name()
        f = open(name, 'w')
        f.write(self.last_current_commit())
        f.close()

    def changelog_file_name(self):
        return os.path.join(self.root_dir, 'debian', 'changelog')

    def read_changelog(self):
        name = self.changelog_file_name()
        content = ''
        if os.path.exists(name):
            content = open(name, 'r').read()
        return content

    def save_changelog(self, actual_changes, cur_version):
        changelog_template ="""%(package)s (%(base_version)s.%(cur_version)d) unstable; urgency=low

%(changelog)s

 -- Webdrive Developers <developers@webdrive.ru>  %(timestamp)s
"""
        pretty_changes = '\n'.join(['  * %s' % ch for ch in actual_changes])
        values = {
            'package': self.package,
            'base_version': self.base_version,
            'changelog': pretty_changes,
            'cur_version': cur_version,
            'timestamp': formatdate(localtime=True)
        }
        f = open(self.changelog_file_name(), 'w')
        f.write(changelog_template % values)
        f.write('\n')
        f.write(self.read_changelog())
        f.close()

def main():
    try:
        parser = OptionParser(usage="usage: %prog [options]")
        parser.set_defaults(
            base_version='1.0',
        )
        parser.add_option('-p', '--package', type='string', help='debian package name', dest='package')
        parser.add_option(
            '-b',
            '--base-version', type='string',
            help='debian package base version. 1.0 by default', dest='base_version'
        )
        options, args = parser.parse_args()

        mandatories = ['package']
        for m in mandatories:
            if not options.__dict__[m]:
                parser.print_usage()
                parser.print_help()
                exit(-1)

        builder = ChangelogBuilder(options.package, options.base_version)
        builder.create_changelog()
        print 'Changelog created'
    except Exception, e:
        raise
        print 'Changelog creation failed: %s' % e
        sys.exit(1)

if __name__ == "__main__":
    main()
